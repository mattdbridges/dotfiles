#!/usr/bin/env bash
# vim: filetype=bash

set -e

# Ask for the administrator password upfront
# sudo -v

# Keep-alive: update existing `sudo` time stamp until `install` has finished
# while true; do sudo -n true; sleep 30; kill -0 "$$" || exit; done 2>/dev/null &

# Don't need these right now, but maybe later on
# readonly PROGNAME=`basename $0`
# readonly PROGDIR=`/usr/bin/readlink -n $(dirname $0)`
# readonly ARGS="$@"

readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly CYAN='\033[0;36m'
readonly BCYAN='\033[1;36m'
readonly NC='\033[0m'

# shellcheck disable=2155
readonly DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"

# shellcheck disable=2155
readonly DOTFILES_PATH="$(dirname $DIR)"

goToDir() {
  local dir="$1"

  pushd "$dir" &>/dev/null
}

goBackDir() {
  popd &>/dev/null
}

log() {
  local statement="$1"

  echo -e "${CYAN}==> $statement${NC}"
}

logCheckPresent() {
  local statement="$1"

  echo -e "${CYAN}==> [+]${NC} $statement"
}

logCheckFailed() {
  local statement="$1"

  echo -e "${RED}==> [-]${NC} $statement"
}

logSuccess() {
  local statement="$1"

  echo -e "${GREEN}==>${NC} $statement"
}

logError() {
  local statement="$1"

  echo -e "${RED}==> $statement${NC}"
}

logDone() {
  echo -e "${GREEN}==> Done!${NC}"
}

announce() {
  local statement="$1"
  echo -e "${BCYAN}==>${NC}${GREEN} $statement${NC}"
}

hasHomebrew() {
  which brew >/dev/null && [[ "$(which brew | grep -ic "not found")" -eq "0" ]]
}

hasBrewLib() {
  local lib=$1
  local MissingCount=
  MissingCount="$(brew ls "$lib" 2>&1 | grep -ic "No such keg")"

  if [[ $MissingCount -eq "0" ]]; then
    return 0
  fi

  # shellcheck disable=2086
  return $MissingCount
}

hasBrewCask() {
  local lib=$1
  local MissingCount=

  MissingCount=$(brew cask ls "$lib" 2>&1 | grep -ic "No cask with this name exists")

  if [[ $MissingCount -eq "0" ]]; then
    return 0
  fi

  # shellcheck disable=2086
  return $MissingCount
}

hasZsh() {
  # shellcheck disable=2046
  return $(hasBrewLib "zsh")
}

hasGit() {
  # shellcheck disable=2046
  return $(hasBrewLib "git")
}

hasRcm() {
  # shellcheck disable=2046
  return $(hasBrewLib "rcm")
}

hasVagrant() {
  # shellcheck disable=2046
  return $(hasBrewCask "vagrant")
}

hasVagrantPlugins() {
  local list=
  list=$(vagrant plugin list)

  [[ $(echo "$list" 2>&1 | grep -ic "parallels") -eq "1" ]]
}

hasPhpbrew() {
  [[ -d "$HOME/.localbin" ]] && [[ -f "$HOME/.localbin/phpbrew" ]]
}

hasZprezto() {
  [[ -e "$HOME/.zprezto" ]]
}

hasTmux() {
  which tmux >/dev/null && [[ "$(which tmux | grep -ic "not found")" -eq "0" ]]
}

hasNvm() {
  [ -d "$HOME/.nvm" ]
}

hasAsdf() {
  [ -d "$HOME/.asdf" ]
}

hasAsdfPlugin() {
  local pluginName=$1

  hasAsdf && [[ "$(asdf plugin list | grep -ic "$pluginName")" -eq "1" ]]
}

hasTmuxTpm() {
  hasTmux && [[ -d $HOME/.tmux/plugins ]]
}

checkGit() {
  if hasGit; then
    logCheckPresent "git"
  else
    logCheckFailed "git"
  fi
}

checkBrew() {
  if hasHomebrew; then
    logCheckPresent "brew"
  else
    logCheckFailed "brew"
  fi
}

checkRcm() {
  if hasRcm; then
    logCheckPresent "rcm"
  else
    logCheckFailed "rcm"
  fi
}

checkZprezto() {
  if hasZprezto; then
    logCheckPresent "zprezto"
  else
    logCheckFailed "zprezto"
  fi
}

checkAsdf() {
  if hasAsdf; then
    logCheckPresent "asdf"
  else
    logCheckFailed "asdf"
  fi
}

checkAsdfPlugin() {
  local plugin=$1

  if hasAsdfPlugin "$plugin"; then
    logCheckPresent "asdf plugin $plugin"
  else
    logCheckFailed "asdf plugin $plugin"
  fi
}

checkPhpbrew() {
  if hasPhpbrew; then
    logCheckPresent "phpbrew"
  else
    logCheckFailed "phpbrew"
  fi
}

checkTmux() {
  if hasTmux; then
    logCheckPresent "tmux"
  else
    logCheckFailed "tmux"
  fi
}

checkVagrant() {
  if hasVagrant; then
    logCheckPresent "vagrant"
  else
    logCheckFailed "vagrant"
  fi
}

checkVagrantPlugins() {
  if hasVagrantPlugins; then
    logCheckPresent "vagrant plugins"
  else
    logCheckFailed "vagrant plugins"
  fi
}

checkTpm() {
  if hasTmuxTpm; then
    logCheckPresent "tmux tpm"
  else
    logCheckFailed "tmux tpm"
  fi
}

checkDotfilesRepo() {
  [[ ! -d $DOTFILES_PATH ]]
}

installHomebrew() {
  if ! hasHomebrew; then
    log "Installing brew"
    yes | /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  else
    log "brew already installed"
  fi
}

installPhpbrew() {
  local localbin="$HOME/.localbin"
  mkdir -p "$localbin"

  if ! hasPhpbrew; then
    log "Installing phpbrew"
    goToDir "$localbin"

    curl -s -L -O https://github.com/phpbrew/phpbrew/raw/master/phpbrew >/dev/null
    chmod +x phpbrew
    goBackDir
    logDone
  else
    log "phpbrew already installed"
  fi

}

updatePhpbrew() {
  if hasPhpbrew; then
    log "Updating phpbrew"
    rm -f "$HOME/.localbin/phpbrew"
    goToDir "$HOME/.localbin"

    curl -s -L -O https://github.com/phpbrew/phpbrew/raw/master/phpbrew >/dev/null
    chmod +x phpbrew

    goBackDir
    logDone
  else
    installPhpbrew
  fi
}

installZprezto() {
  if hasZsh && ! hasZprezto; then
    log "Installing Prezto..."
    git clone --recursive https://github.com/sorin-ionescu/prezto.git "$HOME/.zprezto" &>/dev/null
    setopt EXTENDED_GLOB
    for rcfile in $(find ~/.zprezto/runcoms | grep -v README.md); do
      if [ ! -f "$HOME/.${rcfile:t}" ]; then
        ln -s "$rcfile" "$HOME/.${rcfile:t}"
      fi
    done
    logDone
  else
    log "zprezto already installed"
  fi
}

installEssentialBrews() {
  if ! hasGit || ! hasTmux || ! hasZsh || ! hasRcm || ! hasVagrant; then
    log "Installing Essential tools"
    brew bundle --file=- <<EOF
brew "git"
brew "zsh"
brew "thoughtbot/formulae/rcm"
cask "vagrant"
EOF
    logDone
  else
    log "Essential tools installed"
  fi
}

installVagrantPlugins() {
  if ! hasVagrantPlugins; then
    local list=
    list="$(vagrant plugin list)"
    log "Installing Vagrant plugins"
    if [[ "$(echo "$list" 2>&1 | grep -ic "parallels")" -eq "0" ]]; then
      vagrant plugin install vagrant-parallels
    fi
  else
    log "Vagrant plugins installed"
  fi
}

installAsdf() {
  local dir=${HOME}/.asdf

  if ! hasAsdf; then
    log "Installing asdf"
    git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.8.0
    cd ~/.asdf
    git checkout "$(git describe --abbrev=0 --tags)"
    cd -
    logDone
  else
    log "asdf already installed"
  fi
}

installAsdfPlugins() {
  local plugins=("ruby" "nodejs" "deno" "tmux" "php")
  if hasAsdf; then
    for plugin in "${plugins[@]}"; do
      if ! hasAsdfPlugin "$plugin"; then
        log "Installing asdf $plugin plugin"
        asdf plugin add "$plugin"
      fi
    done
  fi
}

installAsdfTools() {
  if hasAsdf; then
    log "Installing main asdf tools"
    goToDir "$HOME"
    asdf install
    goBackDir
  fi
}

installTpm() {
  local dir=${HOME}/.tmux/plugins/tpm

  if ! hasTmuxTpm; then
    log "Installing TPM for tmux"
    git clone https://github.com/tmux-plugins/tpm "$dir" &>/dev/null
    logDone
  else
    log "tpm already installed"
  fi
}

installBrewfile() {
  log "Homebrew Bundling..."
  brew bundle --no-upgrade --file="$DOTFILES_PATH"/Brewfile
  logSuccess "Bundled!"
}

installVimMinpac() {
  log "Preparing minpac for Vim"
  if [ ! -d "$HOME/.config/nvim/pack/minpac/opt/minpac" ]; then
    log "Cloning minpac for neovim"

    mkdir -p ~/.config/nvim/pack/minpac/opt/
    git clone https://github.com/k-takata/minpac.git "$HOME/.vim/pack/minpac/opt/minpac"

    log "Cloned minpac"
  else
    log "Updating minpac"

    goToDir "$HOME/.config/nvim/pack/minpac/opt/minpac"
    git pull
    goBackDir
  fi
  logDone
}

setupZshAsDefault() {
  if [ -f /usr/local/bin/zsh ] && [[ $SHELL != "/usr/local/bin/zsh" ]]; then
    log "Setting zsh as default shell"
    sudo chsh -s "$(which zsh)" "$(whoami)"
  else
    announce "Already using zsh"
    logDone
  fi
}

setupMinpackPlugins() {
  log "Installing Vim plugins"
  vim +PackUpdate +q && echo
  logDone
}

setupDotfiles() {
  log "Setting up dotfiles"

  rm -rf "$HOME/.rcrc"
  ln -s "$DOTFILES_PATH/rcrc" "$HOME/.rcrc"
  rcup

  logDone
}

setupStarship() {
  log "Setting up starship prompt"

  mkdir -p "$HOME/.config"
  rm -rf "$HOME/.config/starship.toml"
  ln -s "$DOTFILES_PATH/misc/starship.toml" "$HOME/.config/starship.toml"

  logDone
}

cloneRepo() {
  if [[ ! -d $DOTFILES_PATH ]]; then
    log "Cloning dotfiles repository"
    git clone https://github.com/mdespuits/dotfiles.git "$DOTFILES_PATH"
  else
    log "dotfiles repo cloned"
  fi
}

# Keep-alive: update existing `sudo` time stamp until `install` has finished
keepSudoAlive() {
  while true; do
    sudo -n true
    sleep 30
    kill -0 "$$" || exit
  done 2>/dev/null &
}
